this file will map elasticsearch query to sql query.
base Url: POST /indice/type/_search

1. SELECT * FROM Customers;

es: {} or
{
  "query": {
      "match_all":{}
  }
}

2. SELECT column_name,column_name
  FROM table_name;

es: {
  "query": {
      "match_all":{}
  }
}   or


3. SELECT DISTINCT column_name,column_name
FROM table_name;

es:
GET /_search
{
    "query":   { "match_all": {}},
    "_source": [ "title", "created" ]
}

4. SELECT column_name,column_name
FROM table_name
WHERE column_name operator value;

es: {
"query":{
      "term": {
        "Activation":"xxx"
      }
    }
}   or  {
  "query" : {
    "filtered" : {
      "query" : { "match_all" : {}},
      "filter" : {
        "term" : {
            "price" : 20
          }
        }
      }
    }
  }
And, deal with Operators in The WHERE Clause, such as <>, >=, <=, LIKE, IN, BETWEEN

5. SELECT product
FROM products
WHERE (price = 20 OR productID = "XHDK-A-1293-#fJ3")
AND (price != 30)

es: {
  "query" : {
    "filtered" : {
      "filter" : {
        "bool" : {
          "should" : [
            { "term" : {"price" : 20}},
            { "term" : {"productID" : "XHDK-A-1293-#fJ3"}}
          ],
          "must_not" : {
            "term" : {"price" : 30}
          }
        }
      }
    }
  }
}

6. SELECT product
FROM products
WHERE price in [20, 30]

es: {
  "query" : {
    "filtered" : {
      "filter" : {
        "terms" : {
          "price" : [20, 30]
        }
      }}}}

7. SELECT document
FROM products
WHERE price BETWEEN 20 AND 40

es: 
filter: {
  "range" : {
    "price" : {
      "gt" : 20,
      "lt" : 40
    }
  }
}

##Ranges on Dates
"range" : {
"timestamp" : {
"gt" : "2014-01-01 00:00:00",
"lt" : "2014-01-07 00:00:00"
}
}

"range" : {
"timestamp" : {
"gt" : "2014-01-01 00:00:00",
"lt" : "2014-01-01 00:00:00||+1M"
}
}

"range" : {
"timestamp" : {
"gte" : "now-1h"
}
}

8. SELECT tags
FROM posts
WHERE tags IS NOT NULL

Ultimately, this means that a null, [] (an empty array), and [null] are all equivalent.
They simply donâ€™t exist in the inverted index!

{
  "query" : {
    "filtered" : {
      "filter" : {
        "exists" : { "field" : "tags" }
      }
    }
  }
}

9. SELECT tags
FROM posts
WHERE tags IS NULL

"query" : {
  "filtered" : {
    "filter": {
      "missing" : { "field" : "tags" }
    }
  }
  }

10. SELECT column_name, column_name
FROM table_name
ORDER BY column_name ASC|DESC, column_name ASC|DESC;

es: 
{
    "sort" : [
        { "post_date" : {"order" : "asc"}},
        "user",
        { "name" : "desc" },
        { "age" : "desc" },
        "_score"
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}

11. SELECT TOP number|percent column_name(s)
FROM table_name;

es: 

12. SELECT * FROM Customers
WHERE City LIKE 's%';

full-text search

13. SELECT DISTINCT City FROM Customers;

es: {
"size": 0,
"aggs" : {
    "langs" : {
        "terms" : { "field" : "language" }
    }
}}





##
aggregation: 
Buckets
Collections of documents that meet a criterion
Metrics
Statistics calculated on the documents in a bucket
##
1. Partition documents by country (bucket).
2. Then partition each country bucket by gender (bucket).
3. Then partition each gender bucket by age ranges (bucket).
4. Finally, calculate the average salary for each age range (metric)
This will give you the average salary per <country, gender, age> combination. All
in one request and with one pass over the data!

14.  SELECT COUNT(color)
FROM table
GROUP BY color

es: GET /cars/transactions/_search?search_type=count
{
  "aggs" : {
    "colors" : {
      "terms" : {
        "field" : "color"
      }
    }
  }
}

{
  "size" : 0,  //make sure hits = []
  "aggs" : {
    "colors" : {
      "terms" : {
        "field" : "color"
      }
    }
  }
}


15. SQL FUNCTIONS:
AVG() - Returns the average value
COUNT() - Returns the number of rows
FIRST() - Returns the first value
LAST() - Returns the last value
MAX() - Returns the largest value
MIN() - Returns the smallest value
SUM() - Returns the sum

ES:

16. avg() + group by
es:
GET /cars/transactions/_search?search_type=count
{
  "aggs": {
    "colors": {
      "terms": {
        "field": "color"
      },
      "aggs": {
        "avg_price": {
          "avg": {
            "field": "price"
          }
        }
      }
    }
  }
}

17. SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders FROM (Orders
INNER JOIN Employees
ON Orders.EmployeeID=Employees.EmployeeID)
GROUP BY LastName
HAVING COUNT(Orders.OrderID) > 10;

es:


18. group by in group by

es:
GET /cars/transactions/_search?search_type=count
{
  "aggs": {
    "colors": {
      "terms": {
        "field": "color"
      },
      "aggs": {
        "avg_price": {
          "avg": {
            "field": "price"
          }
        },
        "make": {
          "terms": {
            "field": "make"
          },
          "aggs" : {
            "min_price" : { "min": { "field": "price"} },
            "max_price" : { "max": { "field": "price"} }
          }
        }
      }
    }
  }
}



19. 
